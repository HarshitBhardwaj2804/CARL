from flask import Flask, render_template, request, jsonify, redirect, url_for
from datetime import datetime
import json
import os
from langchain_groq import ChatGroq  # Or your chosen model
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain.memory import ConversationBufferMemory
from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
from dotenv import load_dotenv
load_dotenv()

## Setting-Up Langchain-tracing.
os.environ["LANGCHAIN_API_KEY"] = os.getenv("LANGCHAIN_API_KEY")
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_PROJECT"] = "CARL"

groq_api_key = os.getenv("GROQ_API_KEY_MAIN_PROJECT")


app = Flask(__name__)
llm = ChatGroq(model="gemma2-9b-it", groq_api_key=groq_api_key)
prompt = ChatPromptTemplate(
    [
        ("system", ("You are CARL, an excellent assistant. Your task is to help your master as best you can in his/her questions.")),
        ("user", "{question}")
    ]
)

name_prompt = ChatPromptTemplate(
    [
        ("system", "Analyze the user message and suggest a name for the chats. Just suggest the name nothing more than that."),
        ("user", "{question}") 
    ]
)

parser = StrOutputParser()

chain = prompt | llm | parser
name_chain = name_prompt|llm|parser

HISTORY_FILE = "chat_sessions.json"

## function to save conversations in a json file.
def save_history(history):
    with open("chat_sessions.json", "w") as file:
        json.dump(history, file, indent=4)

## function to load history from chat_sessions.json
def load_history():
    if not os.path.exists(HISTORY_FILE):
        return []
    with open(HISTORY_FILE, "r") as file:
        return json.load(file)

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/send_message", methods=["POST"])
def send_message():
    user_message = request.json.get("message")
    response = chain.run({"question": user_message})
    history = load_history()

    if not history or history[-1]['ended']:
        chat_name = name_chain.invoke({"question": user_message})
        new_session = {
            "id" : len(history) + 1,
            "name" : chat_name,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "first_message" : user_message,
            "messages": [],
            "ended": False
        }

        history.append(new_session)

    history[-1]["messages"].append({
        "question":user_message,
        "answer":response
    })   

    save_history(history)

    return jsonify({"reply": response})

@app.route("/extensions")
def extensions():
    return render_template("extensions.html")

@app.route("/end-session")
def end_session():
    history = load_history()
    if history:
        history[-1]["ended"] = True
        save_history(history)
    return redirect(url_for("home"))

@app.route("/history")
def history():
    history = load_history()
    return render_template("history.html", sessions=history)

if __name__ == "__main__":
    app.run(debug=True)
